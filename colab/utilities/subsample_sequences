{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPU7Ck/bUDeRx5ZARnAwfW5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os\n","import json\n","import numpy as np\n","import pandas as pd\n","\n","meta_data_filepath = \"/content/drive/MyDrive/Generative_Models/unconditional_generation/protgpt2_unconditional/generation_metadata_protgpt2.csv\"\n","len_dist_filepath = \"/content/drive/MyDrive/Generative_Models/unconditional_generation/protgpt2_unconditional/uniref50_length_dist_protgpt2.json\"\n","\n","all_metadata_df = pd.read_csv(meta_data_filepath)\n","with open(len_dist_filepath, \"r\") as f:\n","  uniprot_length_dist =  json.load(f)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0XyuLMSevda-","executionInfo":{"status":"ok","timestamp":1717112550538,"user_tz":-600,"elapsed":4161,"user":{"displayName":"Alexander Barnett","userId":"00179978372066039901"}},"outputId":"bed0174e-ab76-444b-e15a-8243434a9985"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["#need to make sure we take the exact length 100 sequences the we selected previously\n","fasta_filepath = \"/content/drive/MyDrive/Generative_Models/utilities/fold_inputs/all_len100.fa\"\n","len100s = []\n","\n","with open(fasta_filepath, \"r\") as f:\n","  fasta_sequences = f.read()\n","\n","for record in fasta_sequences.split('>')[1:]:\n","  sequence_id = record.split('\\n')[0]\n","  if meta_data_filepath.split(\"_\")[-1].split(\".\")[0] in sequence_id:\n","    print(sequence_id)\n","    len100s.append(sequence_id.split(\"_\")[-1])\n","print(len100s)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WO6QP3vV2TZk","executionInfo":{"status":"ok","timestamp":1717112556950,"user_tz":-600,"elapsed":2,"user":{"displayName":"Alexander Barnett","userId":"00179978372066039901"}},"outputId":"064f9987-a7a5-40aa-e280-49e115bda6a3"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["protgpt2_len100_48fcd182-562d-4d08-a083-a66655969e21\n","protgpt2_len100_01948953-9bae-4003-856d-ca67d23b2d30\n","protgpt2_len100_f091eb24-1404-47bf-bdc4-b52cb402eb59\n","protgpt2_len100_db657d77-dcc3-4c75-a107-da8f34f66381\n","protgpt2_len100_2ac0a283-08bc-40d7-ac86-48a8347d7c40\n","protgpt2_len100_cd0bf7c8-a960-47a3-880c-2d1ee5c6c715\n","protgpt2_len100_15faa337-3b6c-4533-b23f-1c1025e25ba9\n","protgpt2_len100_ccbbfe85-d862-43ef-97eb-15f38bdd949a\n","protgpt2_len100_b45932e8-c5ea-49af-abd5-1752fd473e76\n","protgpt2_len100_5ee7e2e8-2456-42ec-8182-20b4f8a02ad7\n","protgpt2_len100_d58c332b-172a-4758-9aa7-54ab5813695f\n","protgpt2_len100_56d4282e-553e-4354-b0b8-a1c8ed30ce01\n","protgpt2_len100_8c912e81-1c94-42f1-ad27-14da19df6cae\n","protgpt2_len100_b6f03388-a5b4-447f-9f9a-f2124e6fab1a\n","protgpt2_len100_ffdb2fae-b236-45cb-9a1f-cc136984edd5\n","protgpt2_len100_640f3469-1842-49eb-977b-37cea1881cb0\n","protgpt2_len100_6eb0e256-97b4-457e-b0f2-be30db763e1e\n","['48fcd182-562d-4d08-a083-a66655969e21', '01948953-9bae-4003-856d-ca67d23b2d30', 'f091eb24-1404-47bf-bdc4-b52cb402eb59', 'db657d77-dcc3-4c75-a107-da8f34f66381', '2ac0a283-08bc-40d7-ac86-48a8347d7c40', 'cd0bf7c8-a960-47a3-880c-2d1ee5c6c715', '15faa337-3b6c-4533-b23f-1c1025e25ba9', 'ccbbfe85-d862-43ef-97eb-15f38bdd949a', 'b45932e8-c5ea-49af-abd5-1752fd473e76', '5ee7e2e8-2456-42ec-8182-20b4f8a02ad7', 'd58c332b-172a-4758-9aa7-54ab5813695f', '56d4282e-553e-4354-b0b8-a1c8ed30ce01', '8c912e81-1c94-42f1-ad27-14da19df6cae', 'b6f03388-a5b4-447f-9f9a-f2124e6fab1a', 'ffdb2fae-b236-45cb-9a1f-cc136984edd5', '640f3469-1842-49eb-977b-37cea1881cb0', '6eb0e256-97b4-457e-b0f2-be30db763e1e']\n"]}]},{"cell_type":"code","source":["!pip install biopython\n","#LLM outputs sometimes have artifacts. Correct these first.\n","import Bio\n","from Bio import SeqIO\n","from Bio.Seq import Seq\n","import re\n","\n","def is_valid_protein(sequence):\n","  try:\n","    Seq(str(sequence))\n","    return True\n","  except ValueError:\n","    return False\n","\n","all_metadata_df.loc[:,'generated_sequence'] = all_metadata_df.loc[:,'generated_sequence'].apply(lambda x: re.sub(r'[\\s\\d]+', '', str(x)))\n","all_metadata_df.loc[:,'generated_sequence'] = all_metadata_df.loc[all_metadata_df.loc[:,'generated_sequence'].apply(is_valid_protein),:]\n","all_metadata_df.loc[:,'length'] = all_metadata_df.loc[:,'generated_sequence'].apply(lambda x: len(x))\n","all_metadata_df.drop('conditions',inplace=True, axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2aYWz3K9yeJe","executionInfo":{"status":"ok","timestamp":1717112570441,"user_tz":-600,"elapsed":8267,"user":{"displayName":"Alexander Barnett","userId":"00179978372066039901"}},"outputId":"1cdfae70-fcc5-40e1-a3cb-18d8b287eeee"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: biopython in /usr/local/lib/python3.10/dist-packages (1.83)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from biopython) (1.25.2)\n"]}]},{"cell_type":"code","source":["subsampled_dfs = []\n","for length, num_rows in uniprot_length_dist:\n","  #need to make sure we take the exact length 100 sequences the we selected previously\n","  if length == 100:\n","    sampled_df = all_metadata_df.loc[all_metadata_df.entity_id.isin(len100s),:]\n","  else:\n","    sampled_df = all_metadata_df[all_metadata_df['length'] == length].sample(frac=1, random_state=42).reset_index(drop=True).head(num_rows)\n","  if len(sampled_df) < num_rows:\n","      print(f\"Warning: Only {len(filtered_df)} rows available for length {length}. Sampling all available rows.\")\n","  subsampled_dfs.append(sampled_df)"],"metadata":{"id":"xsAiV2gMwqpy","executionInfo":{"status":"ok","timestamp":1717112938225,"user_tz":-600,"elapsed":1409,"user":{"displayName":"Alexander Barnett","userId":"00179978372066039901"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["clean_df = pd.concat(subsampled_dfs, ignore_index=True)"],"metadata":{"id":"vkYCbyu_yF0_","executionInfo":{"status":"ok","timestamp":1717112940804,"user_tz":-600,"elapsed":1042,"user":{"displayName":"Alexander Barnett","userId":"00179978372066039901"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["clean_df.to_csv(meta_data_filepath.replace(\".csv\",\"_clean.csv\"),index = False)"],"metadata":{"id":"ORt4gNqIyJyV","executionInfo":{"status":"ok","timestamp":1717112956213,"user_tz":-600,"elapsed":864,"user":{"displayName":"Alexander Barnett","userId":"00179978372066039901"}}},"execution_count":66,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"aH4KFO8P6CwV"},"execution_count":null,"outputs":[]}]}